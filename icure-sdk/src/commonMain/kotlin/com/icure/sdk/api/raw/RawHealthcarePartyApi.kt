/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.icure.sdk.api.raw

import com.icure.sdk.auth.services.AuthService
import com.icure.sdk.model.AesExchangeKeyEncryptionKeypairIdentifier
import com.icure.sdk.model.HexString
import com.icure.sdk.utils.InternalIcureApi
import org.openapitools.client.infrastructure.*
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

@InternalIcureApi
open class RawHealthcarePartyApi(
    baseUrl: String,
    authService: AuthService<*>
) : ApiClient(baseUrl, authService) {
//
//    /**
//     * Create a healthcare party
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;One of Name or Last name+First name, Nihii, and Public key are required.&lt;br&gt;&lt;em&gt;This method follows the Creates One behaviour: it receives the entity in the payload and return the saved entity.&lt;/em&gt;
//     * @param healthcarePartyDto
//     * @return HealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun createHealthcareParty(healthcarePartyDto: HealthcarePartyDto): HttpResponse<HealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = healthcarePartyDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//
//    /**
//     * Create a healthcare party
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;One of Name or Last name+First name, Nihii, and Public key are required.&lt;br&gt;
//     * @param groupId
//     * @param healthcarePartyDto
//     * @return HealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun createHealthcarePartyInGroup(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto): HttpResponse<HealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = healthcarePartyDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/inGroup/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//
//    /**
//     * Delete healthcare parties
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Deleting healthcareParties. Response is an array containing the id of deleted healthcare parties.&lt;br&gt;&lt;em&gt;This method follows the Deletes Many behaviour: of the entity ids passed as parameters, it deletes the ones that exists and that the current user can access.&lt;/em&gt;
//     * @param listOfIdsDto
//     * @return kotlin.collections.List<DocIdentifier>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun deleteHealthcareParties(listOfIdsDto: ListOfIdsDto): HttpResponse<kotlin.collections.List<DocIdentifier>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = listOfIdsDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/delete/batch",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<DeleteHealthcarePartiesResponse>().map { value }
//    }
//
//
//    @Serializable(DeleteHealthcarePartiesResponse.Companion::class)
//    private class DeleteHealthcarePartiesResponse(val value: List<DocIdentifier>) {
//        companion object : KSerializer<DeleteHealthcarePartiesResponse> {
//            private val serializer: KSerializer<List<DocIdentifier>> = serializer<List<DocIdentifier>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: DeleteHealthcarePartiesResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = DeleteHealthcarePartiesResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Delete a healthcare party
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Deleting a healthcareParty. Response is an array containing the id of deleted healthcare party.&lt;br&gt;
//     * @param groupId
//     * @param listOfIdsDto
//     * @return kotlin.collections.List<DocIdentifier>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun deleteHealthcarePartiesInGroup(groupId: kotlin.String, listOfIdsDto: ListOfIdsDto): HttpResponse<kotlin.collections.List<DocIdentifier>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = listOfIdsDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/delete/batch/inGroup/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<DeleteHealthcarePartiesInGroupResponse>().map { value }
//    }
//
//
//    @Serializable(DeleteHealthcarePartiesInGroupResponse.Companion::class)
//    private class DeleteHealthcarePartiesInGroupResponse(val value: List<DocIdentifier>) {
//        companion object : KSerializer<DeleteHealthcarePartiesInGroupResponse> {
//            private val serializer: KSerializer<List<DocIdentifier>> = serializer<List<DocIdentifier>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: DeleteHealthcarePartiesInGroupResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = DeleteHealthcarePartiesInGroupResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Deletes an healthcare party
//     * Deletes an healthcare party, returning its identifier.&lt;br&gt;
//     * @param healthcarePartyId
//     * @return DocIdentifier
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun deleteHealthcareParty(healthcarePartyId: kotlin.String): HttpResponse<DocIdentifier> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.DELETE,
//            "/rest/v2/hcparty/{healthcarePartyId}".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Deletes an healthcare party
//     * Deletes an healthcareparty, returning its identifier.&lt;br&gt;
//     * @param healthcarePartyId
//     * @param groupId
//     * @return DocIdentifier
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun deleteHealthcarePartyInGroup(healthcarePartyId: kotlin.String, groupId: kotlin.String): HttpResponse<DocIdentifier> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.DELETE,
//            "/rest/v2/hcparty/{healthcarePartyId}/inGroup/{groupId}".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId").replace("{" + "groupId" + "}", "$groupId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Filter healthcare parties for the current user (HcParty)
//     * Returns a list of healthcare party along with next start keys and Document ID. If the nextStartKey is Null it means that this is the last page.&lt;br&gt;
//     * @param filterChainHealthcareParty
//     * @param startDocumentId A HealthcareParty document ID (optional)
//     * @param limit Number of rows (optional)
//     * @return PaginatedListHealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun filterHealthPartiesBy(filterChainHealthcareParty: FilterChainHealthcareParty, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null): HttpResponse<PaginatedListHealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = filterChainHealthcareParty
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        startDocumentId?.apply { localVariableQuery["startDocumentId"] = listOf("$startDocumentId") }
//        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/filter",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//
//    /**
//     * List healthcare parties with(out) pagination
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Returns a list of healthcare parties.&lt;br&gt;
//     * @param startKey A healthcare party Last name (optional)
//     * @param startDocumentId A healthcare party document ID (optional)
//     * @param limit Number of rows (optional)
//     * @param desc Descending (optional)
//     * @return PaginatedListHealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun findHealthcarePartiesBy(startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null, desc: kotlin.Boolean? = null): HttpResponse<PaginatedListHealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        startKey?.apply { localVariableQuery["startKey"] = listOf("$startKey") }
//        startDocumentId?.apply { localVariableQuery["startDocumentId"] = listOf("$startDocumentId") }
//        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
//        desc?.apply { localVariableQuery["desc"] = listOf("$desc") }
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Find healthcare parties by name with(out) pagination
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Returns a list of healthcare parties.&lt;br&gt;
//     * @param name The Last name search value (optional)
//     * @param startKey A healthcare party Last name (optional)
//     * @param startDocumentId A healthcare party document ID (optional)
//     * @param limit Number of rows (optional)
//     * @param desc Descending (optional)
//     * @return PaginatedListHealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun findHealthcarePartiesByName(name: kotlin.String? = null, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null, desc: kotlin.Boolean? = null): HttpResponse<PaginatedListHealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        name?.apply { localVariableQuery["name"] = listOf("$name") }
//        startKey?.apply { localVariableQuery["startKey"] = listOf("$startKey") }
//        startDocumentId?.apply { localVariableQuery["startDocumentId"] = listOf("$startDocumentId") }
//        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
//        desc?.apply { localVariableQuery["desc"] = listOf("$desc") }
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/byName",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Find healthcare parties by name with(out) pagination
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Returns a list of healthcare parties.&lt;br&gt;
//     * @param type The type of the HCP (persphysician)
//     * @param spec The speciality of the HCP
//     * @param firstCode The first postCode for the HCP
//     * @param lastCode The last postCode for the HCP
//     * @param limit Number of rows (optional)
//     * @return PaginatedListHealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun findHealthcarePartiesBySpecialityAndPostCode(type: kotlin.String, spec: kotlin.String, firstCode: kotlin.String, lastCode: kotlin.String, limit: kotlin.Int? = null): HttpResponse<PaginatedListHealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/bySpecialityAndPostCode/{type}/{spec}/{firstCode}/to/{lastCode}".replace("{" + "type" + "}", "$type").replace("{" + "spec" + "}", "$spec").replace("{" + "firstCode" + "}", "$firstCode").replace("{" + "lastCode" + "}", "$lastCode"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Find healthcare parties by nihii or ssin with(out) pagination
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Returns a list of healthcare parties.&lt;br&gt;
//     * @param searchValue
//     * @param startKey A healthcare party Last name (optional)
//     * @param startDocumentId A healthcare party document ID (optional)
//     * @param limit Number of rows (optional)
//     * @param desc Descending (optional)
//     * @return PaginatedListHealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun findHealthcarePartiesBySsinOrNihii(searchValue: kotlin.String, startKey: kotlin.String? = null, startDocumentId: kotlin.String? = null, limit: kotlin.Int? = null, desc: kotlin.Boolean? = null): HttpResponse<PaginatedListHealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        startKey?.apply { localVariableQuery["startKey"] = listOf("$startKey") }
//        startDocumentId?.apply { localVariableQuery["startDocumentId"] = listOf("$startDocumentId") }
//        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
//        desc?.apply { localVariableQuery["desc"] = listOf("$desc") }
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/byNihiiOrSsin/{searchValue}".replace("{" + "searchValue" + "}", "$searchValue"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Get the HcParty encrypted AES keys indexed by owner.
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp OR CanAccessAsDataOwner&lt;br&gt;(key, value) of the map is as follows: (ID of the owner of the encrypted AES key, encrypted AES keys)&lt;br&gt;
//     * @param healthcarePartyId
//     * @return kotlin.collections.Map<kotlin.String, kotlin.collections.Map<kotlin.String, kotlin.collections.Map<kotlin.String, kotlin.String>>>
//     */
//    @Suppress("UNCHECKED_CAST")
    open suspend fun getAesExchangeKeysForDelegate(healthcarePartyId: kotlin.String): HttpResponse<Map<String, Map<String, Map<AesExchangeKeyEncryptionKeypairIdentifier, HexString>>>> {
        val localVariableBody =
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/rest/v2/hcparty/{healthcarePartyId}/aesExchangeKeys".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
        )

        return request(
            localVariableConfig,
            localVariableBody,
        ).wrap()
    }
//
//    @Serializable(GetAesExchangeKeysForDelegateResponse.Companion::class)
//    private class GetAesExchangeKeysForDelegateResponse(val value: Map<kotlin.String, kotlin.collections.Map>) {
//        companion object : KSerializer<GetAesExchangeKeysForDelegateResponse> {
//            private val serializer: KSerializer<Map<kotlin.String, kotlin.collections.Map>> = serializer<Map<String, kotlin.collections.Map>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: GetAesExchangeKeysForDelegateResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = GetAesExchangeKeysForDelegateResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Get the current healthcare party if logged in.
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsUser OR CanAccessAsHcp OR CanAccessAsAdmin&lt;br&gt;General information about the current healthcare Party&lt;br&gt;
//     * @return HealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun getCurrentHealthcareParty(): HttpResponse<HealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/current",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Get healthcareParties by their IDs
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsUser&lt;br&gt;General information about the healthcare Party&lt;br&gt;&lt;em&gt;This method follows the Retrieves Many behaviour: it retrieves all the entities which ids are passed as parameter and the user can access.&lt;/em&gt;
//     * @param listOfIdsDto
//     * @return kotlin.collections.List<HealthcarePartyDto>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun getHealthcareParties(listOfIdsDto: ListOfIdsDto): HttpResponse<kotlin.collections.List<HealthcarePartyDto>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = listOfIdsDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/byIds",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<GetHealthcarePartiesResponse>().map { value }
//    }
//
//
//    @Serializable(GetHealthcarePartiesResponse.Companion::class)
//    private class GetHealthcarePartiesResponse(val value: List<HealthcarePartyDto>) {
//        companion object : KSerializer<GetHealthcarePartiesResponse> {
//            private val serializer: KSerializer<List<HealthcarePartyDto>> = serializer<List<HealthcarePartyDto>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: GetHealthcarePartiesResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = GetHealthcarePartiesResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Get healthcareParties by their IDs
//     * General information about the healthcare Party&lt;br&gt;
//     * @param groupId
//     * @param listOfIdsDto  (optional)
//     * @return kotlin.collections.List<HealthcarePartyDto>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun getHealthcarePartiesInGroup(groupId: kotlin.String, listOfIdsDto: ListOfIdsDto? = null): HttpResponse<kotlin.collections.List<HealthcarePartyDto>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = listOfIdsDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/inGroup/{groupId}/byIds".replace("{" + "groupId" + "}", "$groupId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<GetHealthcarePartiesInGroupResponse>().map { value }
//    }
//
//
//    @Serializable(GetHealthcarePartiesInGroupResponse.Companion::class)
//    private class GetHealthcarePartiesInGroupResponse(val value: List<HealthcarePartyDto>) {
//        companion object : KSerializer<GetHealthcarePartiesInGroupResponse> {
//            private val serializer: KSerializer<List<HealthcarePartyDto>> = serializer<List<HealthcarePartyDto>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: GetHealthcarePartiesInGroupResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = GetHealthcarePartiesInGroupResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Get a healthcareParty by his ID
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsUser OR CanAccessAsHcp OR CanAccessAsAdmin&lt;br&gt;General information about the healthcare Party&lt;br&gt;&lt;em&gt;This method follows the Retrieves One behaviour: it retrieves the entity with the specified id if it exists and the user can access it.&lt;/em&gt;
//     * @param healthcarePartyId
//     * @return HealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun getHealthcareParty(healthcarePartyId: kotlin.String): HttpResponse<HealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/{healthcarePartyId}".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Get public key of a healthcare party
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsUser&lt;br&gt;Returns the public key of a healthcare party in Hex&lt;br&gt;
//     * @param healthcarePartyId
//     * @return PublicKeyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun getPublicKey(healthcarePartyId: kotlin.String): HttpResponse<PublicKeyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/{healthcarePartyId}/publicKey".replace("{" + "healthcarePartyId" + "}", "$healthcarePartyId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//    /**
//     * Find healthcare parties by name with(out) pagination
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Returns a list of healthcare parties.&lt;br&gt;
//     * @param name The Last name search value
//     * @return kotlin.collections.List<HealthcarePartyDto>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun listHealthcarePartiesByName(name: kotlin.String): HttpResponse<kotlin.collections.List<HealthcarePartyDto>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/byNameStrict/{name}".replace("{" + "name" + "}", "$name"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<ListHealthcarePartiesByNameResponse>().map { value }
//    }
//
//    @Serializable(ListHealthcarePartiesByNameResponse.Companion::class)
//    private class ListHealthcarePartiesByNameResponse(val value: List<HealthcarePartyDto>) {
//        companion object : KSerializer<ListHealthcarePartiesByNameResponse> {
//            private val serializer: KSerializer<List<HealthcarePartyDto>> = serializer<List<HealthcarePartyDto>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: ListHealthcarePartiesByNameResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = ListHealthcarePartiesByNameResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Find children of an healthcare parties
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;Return a list of children hcp.&lt;br&gt;
//     * @param parentId
//     * @return kotlin.collections.List<HealthcarePartyDto>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun listHealthcarePartiesByParentId(parentId: kotlin.String): HttpResponse<kotlin.collections.List<HealthcarePartyDto>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody =
//            io.ktor.client.utils.EmptyContent
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.GET,
//            "/rest/v2/hcparty/{parentId}/children".replace("{" + "parentId" + "}", "$parentId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return request(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<ListHealthcarePartiesByParentIdResponse>().map { value }
//    }
//
//    @Serializable(ListHealthcarePartiesByParentIdResponse.Companion::class)
//    private class ListHealthcarePartiesByParentIdResponse(val value: List<HealthcarePartyDto>) {
//        companion object : KSerializer<ListHealthcarePartiesByParentIdResponse> {
//            private val serializer: KSerializer<List<HealthcarePartyDto>> = serializer<List<HealthcarePartyDto>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: ListHealthcarePartiesByParentIdResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = ListHealthcarePartiesByParentIdResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Get ids of healthcare party matching the provided filter for the current user (HcParty)
//     *
//     * @param abstractFilterDtoHealthcareParty
//     * @return kotlin.collections.List<kotlin.String>
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun matchHealthcarePartiesBy(abstractFilterDtoHealthcareParty: AbstractFilterDtoHealthcareParty): HttpResponse<kotlin.collections.List<kotlin.String>> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = abstractFilterDtoHealthcareParty
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/match",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap<MatchHealthcarePartiesByResponse>().map { value }
//    }
//
//
//    @Serializable(MatchHealthcarePartiesByResponse.Companion::class)
//    private class MatchHealthcarePartiesByResponse(val value: List<kotlin.String>) {
//        companion object : KSerializer<MatchHealthcarePartiesByResponse> {
//            private val serializer: KSerializer<List<kotlin.String>> = serializer<List<kotlin.String>>()
//            override val descriptor = serializer.descriptor
//            override fun serialize(encoder: Encoder, obj: MatchHealthcarePartiesByResponse) = serializer.serialize(encoder, obj.value)
//            override fun deserialize(decoder: Decoder) = MatchHealthcarePartiesByResponse(serializer.deserialize(decoder))
//        }
//    }
//
//    /**
//     * Modify a Healthcare Party.
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;No particular return value. It&#39;s just a message.&lt;br&gt;&lt;em&gt;This method follows the Updates One behaviour: it updates the entity if it exists, the user can access it and the update is correct.&lt;/em&gt;
//     * @param healthcarePartyDto
//     * @return HealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun modifyHealthcareParty(healthcarePartyDto: HealthcarePartyDto): HttpResponse<HealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = healthcarePartyDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.PUT,
//            "/rest/v2/hcparty",
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//
//    /**
//     * Modify a Healthcare Party.
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsHcp&lt;br&gt;No particular return value. It&#39;s just a message.&lt;br&gt;
//     * @param groupId
//     * @param healthcarePartyDto
//     * @return HealthcarePartyDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun modifyHealthcarePartyInGroup(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto): HttpResponse<HealthcarePartyDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = healthcarePartyDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.PUT,
//            "/rest/v2/hcparty/inGroup/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//
//
//    /**
//     * Register a hcp
//     * &lt;strong&gt;Access Control Policies&lt;/strong&gt;: CanAccessAsAdmin&lt;br&gt;Register a new hcp into the system&lt;br&gt;
//     * @param groupId
//     * @param healthcarePartyDto
//     * @param parentHcPartyId  (optional)
//     * @param token  (optional)
//     * @param useShortToken  (optional)
//     * @return DataOwnerRegistrationSuccessDto
//     */
//    @Suppress("UNCHECKED_CAST")
//    open suspend fun registerPatient1(groupId: kotlin.String, healthcarePartyDto: HealthcarePartyDto, parentHcPartyId: kotlin.String? = null, token: kotlin.String? = null, useShortToken: kotlin.Boolean? = null): HttpResponse<DataOwnerRegistrationSuccessDto> {
//
//        val localVariableAuthNames = listOf<String>()
//
//        val localVariableBody = healthcarePartyDto
//
//        val localVariableQuery = mutableMapOf<String, List<String>>()
//        parentHcPartyId?.apply { localVariableQuery["parentHcPartyId"] = listOf("$parentHcPartyId") }
//        token?.apply { localVariableQuery["token"] = listOf("$token") }
//        useShortToken?.apply { localVariableQuery["useShortToken"] = listOf("$useShortToken") }
//        val localVariableHeaders = mutableMapOf<String, String>()
//
//        val localVariableConfig = RequestConfig<kotlin.Any?>(
//            RequestMethod.POST,
//            "/rest/v2/hcparty/register/inGroup/{groupId}".replace("{" + "groupId" + "}", "$groupId"),
//            query = localVariableQuery,
//            headers = localVariableHeaders,
//            requiresAuthentication = false,
//        )
//
//        return jsonRequest(
//            localVariableConfig,
//            localVariableBody,
//            localVariableAuthNames
//        ).wrap()
//    }
//
//

}
