plugins {
	kotlinMultiplatform()
	kotlinSerialization()
}

val version: String? by project
project.version = version ?: "0.0.0-snapshot"

kotlin {
	val sharedLibBaseName = "cardinal-sdk-native-pylib"
	configureKotlinLinux(this).forEach {
		it.binaries {
			sharedLib {
				baseName = sharedLibBaseName
			}
		}
	}
	macosArm64 {
		binaries {
			sharedLib {
				baseName = sharedLibBaseName
			}
		}
	}
	macosX64 {
		binaries {
			sharedLib {
				baseName = sharedLibBaseName
			}
		}
	}
	mingwX64 {
		binaries {
			sharedLib {
				baseName = sharedLibBaseName
			}
		}
	}

	sourceSets {
		commonMain {
			dependencies {
				implementation(project(":cardinal-sdk"))
				implementation(libs.coroutinesCore)
			}
		}
		all {
			languageSettings.optIn("kotlin.time.ExperimentalTime")
		}
	}
}

// TODO should become task type
tasks.register("clearAutoGenerated") {
	doLast {
		projectDir.resolve("src").walkBottomUp().forEach {
			if (
				it.isFile && (
					it.readLines().firstOrNull()?.startsWith("// auto-generated file") == true ||
					it.readLines().firstOrNull()?.startsWith("# auto-generated file") == true
				)
			) {
				it.delete()
			} else if (it.isDirectory && it.listFiles()!!.isEmpty()) {
				it.delete()
			}
		}
	}
}

fun File.mergeInto(other: File) {
	check(isDirectory && other.isDirectory) { "Can only merge a directory into another directory - ${this.absolutePath} -> ${other.absolutePath}" }
	val otherFiles = other.listFiles()!!.groupBy { it.name }.mapValues {
		check (it.value.size == 1) { "Duplicate file names" }
		it.value.first()
	}
	listFiles()!!.forEach { curr ->
		if (otherFiles.containsKey(curr.name)) {
			val otherCurr = otherFiles.getValue(curr.name)
			check (curr.isDirectory == otherCurr.isDirectory) {
				"Generated isDirectory != existing isDirectory - ${curr.absolutePath} -> ${otherCurr.absolutePath}"
			}
			if (curr.isDirectory) {
				curr.mergeInto(otherCurr)
			} else {
				curr.copyTo(otherCurr, overwrite = true)
			}
		} else {
			curr.copyRecursively(other.resolve(curr.name))
		}
	}
}

// TODO should become task type
tasks.register("updateAutoGenerated") {
	doLast {
		rootDir.resolve("cardinal-sdk/build/generated/ksp/jvm/jvmMain/resources/pykt").mergeInto(
			projectDir.resolve("src/commonMain/kotlin")
		)
		rootDir.resolve("cardinal-sdk/build/generated/ksp/jvm/jvmMain/resources/py/cardinal_sdk").mergeInto(
			projectDir.resolve("src/python")
		)
	}
}