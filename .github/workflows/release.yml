name: Release packages

on:
    push:
        branches:
            - develop
    pull_request:
        types:
            - closed
jobs:
    release:
        #        if: github.event.pull_request.merged == true
        runs-on: self-hosted
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    submodules: 'recursive'
                    token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

            -   name: Get Previous tag
                id: previoustag
                run: |
                    if [[ $GITHUB_REF == refs/tags/* ]]; then
                        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
                    else
                        echo ::set-output name=VERSION::latest
                    fi

            -   name: Get next versions
                id: semvers
                run: |
                    VERSION=${{ steps.previoustag.outputs.VERSION }}
                    if [[ "$VERSION" == "latest" ]]; then
                        VERSION="0.0.0"
                    fi
                    IFS='.' read -r -a version_parts <<< "$VERSION"
                    MAJOR=${version_parts[0]}
                    MINOR=${version_parts[1]}
                    PATCH=${version_parts[2]}
                    echo "::set-output name=major::$((MAJOR + 1)).0.0"
                    echo "::set-output name=minor::$MAJOR.$((MINOR + 1)).0"
                    echo "::set-output name=patch::$MAJOR.$MINOR.$((PATCH + 1))"

            -   name: Default new version
                run: echo "NEW_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV

            -   name: Update major version
                if: ${{ contains(github.event.pull_request.labels.*.name, 'SemVer.major') }}
                run: echo "NEW_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_ENV

            -   name: Update minor version
                if: ${{ contains(github.event.pull_request.labels.*.name, 'SemVer.minor') }}
                run: echo "NEW_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV

            -   name: Update patch version
                if: ${{ contains(github.event.pull_request.labels.*.name, 'SemVer.patch') }}
                run: echo "NEW_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV

            -   name: Build and push
                run: |
                    docker build --progress=plain -f build.Dockerfile --build-arg "repoUsername=${{secrets.REPO_USERNAME}}" --build-arg "repoPassword=${{secrets.REPO_PASSWORD}}" --build-arg "version=${{env.NEW_VERSION}}" .

            -   name: Upload Release
                uses: ncipollo/release-action@v1
                with:
                    tag: ${{ env.NEW_VERSION }}
                    token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}