name: Release packages

on:
    push:
        branches:
            - develop
    pull_request:
        types:
            - closed
jobs:
    release:
        # if: github.event.pull_request.merged == true
        # if: false
        runs-on: self-hosted
        steps:
            -   name: Checkout code
                uses: actions/checkout@v4
                with:
                    submodules: 'recursive'
                    token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

            -   name: Set up JDK 21
                uses: actions/setup-java@v4
                with:
                    java-version: '21'
                    distribution: 'temurin'

            -   name: Grant execute permission for gradlew
                run: chmod +x ./gradlew

            # -   name: Get Previous tag
            #     id: previoustag
            #     run: |
            #         if [[ $GITHUB_REF == refs/tags/* ]]; then
            #             echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
            #         else
            #             echo ::set-output name=VERSION::latest
            #         fi
            #
            # -   name: Get next versions
            #     id: semvers
            #     run: |
            #         VERSION=${{ steps.previoustag.outputs.VERSION }}
            #         if [[ "$VERSION" == "latest" ]]; then
            #             VERSION="0.0.0"
            #         fi
            #         IFS='.' read -r -a version_parts <<< "$VERSION"
            #         MAJOR=${version_parts[0]}
            #         MINOR=${version_parts[1]}
            #         PATCH=${version_parts[2]}
            #         echo "::set-output name=major::$((MAJOR + 1)).0.0"
            #         echo "::set-output name=minor::$MAJOR.$((MINOR + 1)).0"
            #         echo "::set-output name=patch::$MAJOR.$MINOR.$((PATCH + 1))"
            #
            # -   name: Default new version
            #     run: echo "NEW_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV
            #
            # -   name: Update major version
            #     if: ${{ contains(github.event.pull_request.labels.*.name, 'SemVer.major') }}
            #     run: echo "NEW_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_ENV
            #
            # -   name: Update minor version
            #     if: ${{ contains(github.event.pull_request.labels.*.name, 'SemVer.minor') }}
            #     run: echo "NEW_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV
            #
            # -   name: Update patch version
            #     if: ${{ contains(github.event.pull_request.labels.*.name, 'SemVer.patch') }}
            #     run: echo "NEW_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV

            -   name: Build and push
                run: |
                    ./gradlew -x test :icure-sdk:publishAllPublicationsToTaktikRepository
                env:
                    ORG_GRADLE_PROJECT_repoUsername: ${{ secrets.REPO_USERNAME }}
                    ORG_GRADLE_PROJECT_repoPassword: ${{ secrets.REPO_PASSWORD }}
                    ORG_GRADLE_PROJECT_mavenReleasesRepository: ${{ secrets.MAVEN_RELEASES_REPOSITORY }}
                    ORG_GRADLE_PROJECT_mavenSnapshotsRepository: ${{ secrets.MAVEN_SNAPSHOT_REPOSITORY }}
                    ORG_GRADLE_PROJECT_mavenRepository: ${{ secrets.MAVEN_REPOSITORY }}

            -   name: Upload Release
                uses: ncipollo/release-action@v1
                with:
                    tag: ${{ env.NEW_VERSION }}
                    token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}